#ifndef CONSOLE_ADVENTURE_GAME_ITEM_MANAGER
#define CONSOLE_ADVENTURE_GAME_ITEM_MANAGER

#include <string>
#include <vector>
#include <map>

#define IMAP 0
#define IENEMY_ZOMBIE 1
#define IENEMY_SKELETON 2
#define IENEMY_EVIL_KNIGHT 3
#define IUNKNOWN_ENEMY -1

enum ItemType {
    WEAPON,
    HEALTH,
    ARMOR,
    SHIELD
};

// –î–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç–∞
struct ItemData {
    ItemType type; // –¢–∏–ø –ø—Ä–µ–¥–º–µ—Ç–∞
    float strength; // –°–∏–ª–∞
    int medicability; // –õ–µ—á–∏–º–æ—Å—Ç—å (–Ω—É............... üíÄ) –æ—Ç –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞... –ß–µ–º –≤—ã—à–µ - —Ç–µ–º –ª—É—á—à–µ
    float protectability; // –ó–∞—â–∏—â–∞–µ–º–æ—Å—Ç—å –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞. –ß–µ–º –≤—ã—à–µ - –ª—É—á—à–µ
    bool stack; // –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ –ª–∏ –Ω–æ—Å–∏—Ç—å —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∞–∫–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    int maxStack = 1; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–Ω–æ –Ω–æ—Å–∏—Ç—å —Å —Å–æ–±–æ–π
};

struct PlayerItemData {
    ItemData item; // –î–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç–∞
    int amount; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    double lvl; // –£—Ä–æ–≤–µ–Ω—å –ø—Ä–µ–¥–º–µ—Ç–∞
    std::string defaultName; // –û–±—ã—á–Ω–æ–µ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ) –∏–º—è –ø—Ä–µ–¥–º–µ—Ç–∞ –ø—Ä–∏ –µ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏–∏
    std::string customName = ""; // –ò–º—è –ø—Ä–µ–¥–º–µ—Ç–∞, –∫–æ—Ç–æ—Ä–æ–µ –∑–∞–¥–∞—ë—Ç —Å–∞–º –∏–≥—Ä–æ–∫
    bool used = false; // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ –¥–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
};

// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è itemsList
struct ItemListsData {
    std::string name; // –ò–º—è –ø—Ä–µ–¥–º–µ—Ç–∞
    int percent; // –®–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω–∏—è/–≤—ã–ø–∞–¥–µ–Ω–∏—è
};

class ItemManager {
    public:
        const static inline std::map<std::string, ItemData> defaultItemsInfo = {
            // Health items [map]
            {"Bread", {ItemType::HEALTH, 0, 12, 0, true, 64}},
            {"Apple", {ItemType::HEALTH, 0, 5, 0, true, 128}},
            {"Iron Apple", {ItemType::HEALTH, 0, 15, 0, true, 28}},
            {"Golden Apple", {ItemType::HEALTH, 0, 25, 0, true, 16}},

            // Health items [enemy]
            {"Diamond Apple", {ItemType::HEALTH, 0, 59, 0, true, 8}},

            // Weapon items [map]
            {"Paper Sword", {ItemType::WEAPON, 0.5, 0, 0.15, false}},
            {"Wooden Sword", {ItemType::WEAPON, 1.5, 0, 0.45, false}},

            // Weapon items [enemy]
            {"Skeleton Sword", {ItemType::WEAPON, 2.3, 0, 0.95, false}},

            // Shield items [map]
            {"Paper Shield", {ItemType::SHIELD, 0, 0, 0.65, false}},
            {"Stone Shield", {ItemType::SHIELD, 0.3, 0, 1, false}},

            // Shield items [enemy]
            {"Magic Shield", {ItemType::SHIELD, 0.75, 12, 1.7, false}},

            // Armor items [map]
            {"Wooden Armor", {ItemType::ARMOR, 0, 0, 1.35, false}},
        };
        const static inline std::map<int, std::vector<ItemListsData>> itemsList = {
            {IMAP, {
                {"Apple", 85},
                {"Golden Apple", 20},
                {"Iron Apple", 30},
                {"Bread", 65},
                {"Paper Shield", 50},
                {"Wooden Sword", 45},
                {"Wooden Armor", 20}
                }
            },
            {IENEMY_SKELETON, {
                {"Skeleton Sword", 15},
                {"Stone Shield", 20},
                {"Golder Apple", 25}
                }
            },
            {IENEMY_ZOMBIE, {
                {"Stone Shield", 20}
                }
            },
            {IENEMY_EVIL_KNIGHT, {
                {"Stone Shield", 20},
                {"Magic Shield", 10}
                }
            }
        };

        static PlayerItemData addRandomMapItem(std::vector<PlayerItemData>& itemStorage);
        static PlayerItemData addRandomEnemyItem(const int& enemy, std::vector<PlayerItemData>& itemStorage);
        //static void deleteItem(std::string itemName);
        static bool isWeapon(std::string itemName);
        static bool isHealther(std::string itemName);
        static bool isArmor(std::string itemName);
        static bool isShield(std::string itemName);
        static std::map<int, std::string> handlerItemsMenu();
        static std::string playerInventory();
};

#endif